# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zQ9zSOmMUn6dSmnwraIEaEE8vuZrh0d8
"""








import streamlit as st
from ortools.sat.python import cp_model
from docx import Document

# UI Header
st.title("üìÖ Interactive 7-Day Shift Scheduler")

# Input: Names
names_input = st.text_area("Enter names (comma-separated):", "Alice, Bob, Charlie, David, Eva")
people = [name.strip() for name in names_input.split(',') if name.strip()]
num_people = len(people)

# Input: Shift requirements
st.subheader("üîß Enter Daily Shift Requirements")
shift_A = st.number_input("Shift A", min_value=1, value=2)
shift_B = st.number_input("Shift B", min_value=1, value=2)
shift_C = st.number_input("Shift C", min_value=1, value=1)
shift_requirements = {'A': shift_A, 'B': shift_B, 'C': shift_C}

num_days = 7
soft_max_c = 3
hard_max_c = 4

if st.button("Generate Schedule"):
    total_required = shift_A + shift_B + shift_C
    if num_people != total_required:
        st.error(f"‚ùå Number of people ({num_people}) must equal total shift demand ({total_required})")
    else:
        max_4_c_people = max(1, int(0.1 * num_people))  # at least 1 person allowed 4 C shifts
        model = cp_model.CpModel()
        shifts = ['A', 'B', 'C']
        shift_vars = {}

        for p in range(num_people):
            for d in range(num_days):
                for s in shifts:
                    shift_vars[(p, d, s)] = model.NewBoolVar(f"shift_p{p}_d{d}_{s}")

        for p in range(num_people):
            for d in range(num_days):
                model.Add(sum(shift_vars[(p, d, s)] for s in shifts) == 1)

        for d in range(num_days):
            for s in shifts:
                model.Add(sum(shift_vars[(p, d, s)] for p in range(num_people)) == shift_requirements[s])

        c_shift_counts = {}
        has_4_c = []
        for p in range(num_people):
            c_total = model.NewIntVar(0, num_days, f"c_count_{p}")
            c_shift_counts[p] = c_total
            model.Add(c_total == sum(shift_vars[(p, d, 'C')] for d in range(num_days)))
            model.Add(c_total <= hard_max_c)

            flag = model.NewBoolVar(f"has_4_c_{p}")
            model.Add(c_total == 4).OnlyEnforceIf(flag)
            model.Add(c_total != 4).OnlyEnforceIf(flag.Not())
            has_4_c.append(flag)
        model.Add(sum(has_4_c) <= max_4_c_people)

        for p in range(num_people):
            for d in range(1, num_days):
                model.Add(shift_vars[(p, d, 'A')] + shift_vars[(p, d-1, 'C')] <= 1)

        penalties = []
        for p in range(num_people):
            diff = model.NewIntVar(-num_days, num_days, f"diff_{p}")
            sq = model.NewIntVar(0, num_days**2, f"square_{p}")
            model.Add(diff == c_shift_counts[p] - soft_max_c)
            model.AddMultiplicationEquality(sq, [diff, diff])
            penalties.append(sq)

        model.Minimize(sum(penalties))

        solver = cp_model.CpSolver()
        solver.parameters.max_time_in_seconds = 60
        status = solver.Solve(model)

        if status in [cp_model.OPTIMAL, cp_model.FEASIBLE]:
            st.success("‚úÖ Schedule generated!")

            doc = Document()
            doc.add_heading('7-Day Shift Schedule', level=1)

            st.subheader("üìÖ Daily Schedule")
            doc.add_heading('Daily Schedule', level=2)
            for d in range(num_days):
                st.write(f"**Day {d+1}**")
                doc.add_heading(f'Day {d+1}', level=3)
                for s in shifts:
                    assigned = [people[p] for p in range(num_people) if solver.Value(shift_vars[(p, d, s)])]
                    st.write(f"  Shift {s}: {', '.join(assigned)}")
                    doc.add_paragraph(f"Shift {s}: {', '.join(assigned)}")

            st.subheader("üìä C-Shift Summary")
            doc.add_heading("C-Shift Summary", level=2)
            fairness = 0
            for p in range(num_people):
                c_count = solver.Value(c_shift_counts[p])
                deviation = c_count - soft_max_c
                fairness += deviation ** 2
                st.write(f"{people[p]}: C shifts = {c_count}, Deviation¬≤ = {deviation**2}")
                doc.add_paragraph(f"{people[p]}: C shifts = {c_count}, Deviation¬≤ = {deviation**2}")
            st.write(f"üë• People with 4 C shifts: {sum(solver.Value(flag) for flag in has_4_c)} / {max_4_c_people}")
            st.write(f"üìà Fairness Score: {fairness:.2f}")
            doc.add_paragraph(f"People with 4 C shifts: {sum(solver.Value(flag) for flag in has_4_c)} / {max_4_c_people}")
            doc.add_paragraph(f"Fairness Score: {fairness:.2f}")

            st.subheader("üßæ Individual Schedules")
            doc.add_heading("Individual Schedules", level=2)
            for p in range(num_people):
                sched = ''
                for d in range(num_days):
                    for s in shifts:
                        if solver.Value(shift_vars[(p, d, s)]):
                            sched += s + ' '
                st.write(f"{people[p]}: {sched.strip()}")
                doc.add_paragraph(f"{people[p]}: {sched.strip()}")

            # Save and offer download
            doc.save("shift_schedule.docx")
            with open("shift_schedule.docx", "rb") as f:
                st.download_button("üìÑ Download Word File", f, file_name="shift_schedule.docx")
        else:
            st.error("‚ùå Could not find a valid schedule.")



"""# New Section"""